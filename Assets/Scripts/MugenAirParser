// ================================
// FILE: Assets/Editor/MugenAirParser.cs
// DESCRIPTION: Robust AIR parser that reads multiple actions, frames, scales, LoopStart.
// ================================
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using UnityEngine;

public static class MugenAirParser
{
    public class Frame
    {
        public int group;
        public int index;
        public Vector2 offset;
        public Vector2 scale = Vector2.one;
        public int duration; // ticks
    }

    public class ActionData
    {
        public string id; // Action ID string (as in AIR)
        public List<Frame> frames = new List<Frame>();
        public int loopStartIndex = -1;
        public int pixelsPerUnit = 100; // allow per-action override if needed
    }

    public static Dictionary<string, ActionData> ParseActions(string airPath)
    {
        var dict = new Dictionary<string, ActionData>();
        if (!File.Exists(airPath))
        {
            Debug.LogError("AIR file not found: " + airPath);
            return dict;
        }

        var lines = File.ReadAllLines(airPath);
        ActionData current = null;

        var inv = CultureInfo.InvariantCulture;

        for (int i = 0; i < lines.Length; i++)
        {
            string raw = lines[i];
            string line = raw.Trim();
            if (string.IsNullOrEmpty(line) || line.StartsWith(";")) continue;

            if (line.StartsWith("[Begin Action", System.StringComparison.OrdinalIgnoreCase))
            {
                // e.g. [Begin Action 1100]
                int lb = line.IndexOf(' ');
                int rb = line.IndexOf(']');
                string id = line.Substring(lb, rb - lb).Replace("Action", "").Trim();
                current = new ActionData { id = id };
                dict[id] = current;
                continue;
            }

            if (current == null) continue;

            if (line.Equals("LoopStart", System.StringComparison.OrdinalIgnoreCase))
            {
                current.loopStartIndex = current.frames.Count;
                continue;
            }

            // Example frame lines:
            // 200,49, 0,0, 5
            // 200,50, 0,0, 5, , , 1.1,0.9
            // -1  indicates blank sprite
            var parts = SplitCsv(line);
            if (parts.Count >= 5 && int.TryParse(parts[0], out int group))
            {
                var f = new Frame();
                f.group = group;
                f.index = int.Parse(parts[1], inv);
                f.offset = new Vector2(ParseFloat(parts[2]), ParseFloat(parts[3]));
                f.duration = int.Parse(parts[4], inv);

                // Optional scale at parts[7], parts[8]
                if (parts.Count >= 8 && !string.IsNullOrEmpty(parts[7]))
                    f.scale.x = ParseFloat(parts[7]);
                else f.scale.x = 1f;

                if (parts.Count >= 9 && !string.IsNullOrEmpty(parts[8]))
                    f.scale.y = ParseFloat(parts[8]);
                else f.scale.y = 1f;

                current.frames.Add(f);
            }
        }

        return dict;
    }

    static float ParseFloat(string s)
    {
        if (float.TryParse(s.Trim(), NumberStyles.Float, CultureInfo.InvariantCulture, out var v)) return v;
        return 0f;
    }

    // Handles commas and ignores simple empty segments
    static List<string> SplitCsv(string line)
    {
        var list = new List<string>();
        var segs = line.Split(',');
        foreach (var seg in segs)
            list.Add(seg.Trim());
        return list;
    }
}